(define-fuzzy-logic zadeh) # lukasiewicz / zadeh / classical

############################################################
##    Scene Definition
############################################################

(disjoint Object Scene)

(define-fuzzy-concept atLeast2 right-shoulder( 0.0, 100.0, 1.0, 2.0))
(define-fuzzy-concept atLeast3 right-shoulder( 0.0, 100.0, 2.0, 3.0))

(define-primitive-concept Scene2 Scene)
(define-concept Scene2 (some right atLeast2))

(define-primitive-concept Scene3 Scene)
(define-concept Scene3 (some right atLeast3))

(define-primitive-concept Scene4 Scene)
(define-concept Scene4 (some left atLeast2))

(define-primitive-concept Scene5 Scene)
(define-concept Scene5 (and (some right atLeast3) (some left atLeast3)))

(define-primitive-concept Scene6 Scene)
(define-concept Scene6 (and (some right atLeast2) (some left atLeast3)))

# this query does not work if the other are not commented (check if this is a visualization or computation problem !!!!!!!!!!!!!!!!!!!!!)
# Scene2
# |_____ Scene6
# |      |_____ Scene5
# |_____ Scene3
#        |_____ Scene5
# Scene4
# |_____ Scene6
#        |_____ Scene5
(min-subs? Scene2 Scene3)
#(min-subs? Scene2 Scene4)
#(min-subs? Scene2 Scene5)
#(min-subs? Scene2 Scene6)
#(min-subs? Scene3 Scene2)
#(min-subs? Scene3 Scene4)
#(min-subs? Scene3 Scene5)
#(min-subs? Scene3 Scene6)
#(min-subs? Scene4 Scene2)
#(min-subs? Scene4 Scene3)
#(min-subs? Scene4 Scene5)
#(min-subs? Scene4 Scene6)
#(min-subs? Scene5 Scene2)
#(min-subs? Scene5 Scene3)
#(min-subs? Scene5 Scene4)
#(min-subs? Scene5 Scene6)
#(min-subs? Scene6 Scene2)
#(min-subs? Scene6 Scene3)
#(min-subs? Scene6 Scene4)
#(min-subs? Scene6 Scene5)


############################################################
##    Spatial relations
############################################################

(define-primitive-concept Book  Object)
(define-primitive-concept Mouse Object)
(define-primitive-concept Cup   Object)

(define-concept LeftObject (and (or Book Mouse Cup) (some hasLeft Object)))
(define-concept RightObject (and (or Book Mouse Cup) (some hasRight Object)))

(instance book1 Book  0.65)
(instance book2 Book  0.85)
(instance book3 Book  1.0 )
(instance mouse Mouse 0.9 )
(instance cup   Cup   0.8 )

(related book1 cup   hasRight 0.7 )
(related mouse book1 hasRight 0.75)
(related cup   book1 hasLeft  0.55)
(related book2 book1 hasLeft  0.9 )
(related book3 book2 hasLeft  0.95)

(range  hasRight Object)
(domain hasRight Object)
(range  hasLeft  Object)
(domain hasLeft  Object)

#(min-instance? book1 LeftObject)
#(min-instance? book2 LeftObject)
#(min-instance? book3 LeftObject)
#(min-instance? mouse LeftObject)
#(min-instance? cup   LeftObject)

#(min-instance? book1 RightObject)
#(min-instance? book2 RightObject)
#(min-instance? book3 RightObject)
#(min-instance? mouse RightObject)
#(min-instance? cup   RightObject)


############################################################
##    Scene Classification
############################################################

(functional right)
(range right *real* 0 100.0 )

(functional left)
(range left  *real* 0 100.0)

(functional front)
(range front  *real* 0 100.0)

(functional behind)
(range behind  *real* 0 100.0)

# based on the results of the above queries (spatial relations)
# sigma-count:
#        left  : (book1 + book2 + book3 + mouse + cup) = (.00 + .85 + .95 + .00 + .55) = 2.35
#        right : (book1 + book2 + book3 + mouse + cup) = (.65 + .00 + .00 + .75 + .00) = 1.95

#(instance s1 (= right 1.95))

(instance s2 (= left  2.35))
(instance s2 (= right 1.95))

#(min-instance? s1 Scene2)
#(min-instance? s2 Scene2)
#(min-instance? s1 Scene3)
#(min-instance? s2 Scene3)
#(min-instance? s1 Scene4)
#(min-instance? s2 Scene4)
#(min-instance? s1 Scene5)
#(min-instance? s2 Scene5)
#(min-instance? s1 Scene6)
#(min-instance? s2 Scene6)


