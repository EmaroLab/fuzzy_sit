(define-fuzzy-logic zadeh )
(define-fuzzy-concept atLeast0.1 right-shoulder(0.0, 20.0, 0.1, 0.1) )
(define-fuzzy-concept atLeast0.7 right-shoulder(0.0, 20.0, 0.4, 0.7) )
(define-fuzzy-concept atLeast0.6 right-shoulder(0.0, 20.0, 0.3, 0.6) )
(define-fuzzy-concept atLeast1.1 right-shoulder(0.0, 20.0, 0.6, 1.1) )
(define-fuzzy-concept atLeast1.0 right-shoulder(0.0, 20.0, 0.5, 1.0) )
(functional hasBookLeft)
(range hasBookLeft *real* 0.0 100.0)
(functional hasCupFront)
(range hasCupFront *real* 0.0 100.0)
(functional hasCupLeft)
(range hasCupLeft *real* 0.0 100.0)
(functional hasCupBehind)
(range hasCupBehind *real* 0.0 100.0)
(functional hasBookRight)
(range hasBookRight *real* 0.0 100.0)
(functional hasMouseRight)
(range hasMouseRight *real* 0.0 100.0)
(functional hasMouseBehind)
(range hasMouseBehind *real* 0.0 100.0)
(functional hasBookFront)
(range hasBookFront *real* 0.0 100.0)
(functional hasBookBehind)
(range hasBookBehind *real* 0.0 100.0)
(functional hasMouseFront)
(range hasMouseFront *real* 0.0 100.0)
(functional hasCupRight)
(range hasCupRight *real* 0.0 100.0)
(functional hasMouseLeft)
(range hasMouseLeft *real* 0.0 100.0)
(define-concept MouseLeft (g-and (some isLeftOf SpatialObject) Mouse ))
(define-concept MouseFront (g-and (some isFrontOf SpatialObject) Mouse ))
(define-concept B (and (some hasBookBehind atLeast0.7) (some hasBookLeft atLeast0.6) (some hasCupFront atLeast1.1) (some hasCupRight atLeast1.0) ))
(define-concept CupLeft (g-and (some isLeftOf SpatialObject) Cup ))
(define-concept A (g-and (some hasBookBehind atLeast0.6) (some hasBookFront atLeast0.1) (some hasBookLeft atLeast0.6) (some hasBookRight atLeast0.1) (some hasCupFront atLeast1.0) (some hasCupRight atLeast1.1) ))
(define-concept CupBehind (g-and (some isBehindOf SpatialObject) Cup ))
(define-concept BookRight (g-and (some isRightOf SpatialObject) Book ))
(define-concept CupRight (g-and (some isRightOf SpatialObject) Cup ))
(define-concept BookFront (g-and (some isFrontOf SpatialObject) Book ))
(define-concept BookLeft (g-and (some isLeftOf SpatialObject) Book ))
(define-concept MouseBehind (g-and (some isBehindOf SpatialObject) Mouse ))
(define-concept BookBehind (g-and (some isBehindOf SpatialObject) Book ))
(define-concept MouseRight (g-and (some isRightOf SpatialObject) Mouse ))
(define-concept CupFront (g-and (some isFrontOf SpatialObject) Cup ))
(define-primitive-concept B Scene )
(disjoint Object Scene )
(disjoint Scene SpatialObject )
(domain hasBookLeft Scene)
(domain hasCupFront Scene)
(domain hasCupLeft Scene)
(domain hasCupBehind Scene)
(domain hasBookRight Scene)
(domain hasMouseRight Scene)
(domain hasMouseBehind Scene)
(domain hasBookFront Scene)
(domain isLeftOf SpatialObject)
(domain hasBookBehind Scene)
(domain hasBookBehind (g-implies (some hasBookBehind atLeast0.6) (g-implies (g-and (some hasBookFront atLeast0.1) (some hasBookLeft atLeast0.6) (some hasBookRight atLeast0.1) (some hasCupFront atLeast1.0) (some hasCupRight atLeast1.1) ) A)))
(domain hasBookBehind (g-implies (some hasBookBehind atLeast0.6) (g-implies (g-and (some hasBookFront atLeast0.1) (some hasBookLeft atLeast0.6) (some hasBookRight atLeast0.1) (some hasCupFront atLeast1.0) (some hasCupRight atLeast1.1) ) A)))
(domain isFrontOf SpatialObject)
(domain isRightOf SpatialObject)
(domain hasMouseFront Scene)
(domain isBehindOf SpatialObject)
(domain hasCupRight Scene)
(domain hasMouseLeft Scene)
(range isBehindOf Object)
(range isLeftOf Object)
(range isFrontOf Object)
(range isRightOf Object)
(transitive isFrontOf)
(transitive isBehindOf)
(transitive isRightOf)
(transitive isLeftOf)

#!# A <- Mouse=0.0,Book=0.1,Cup=0.7;Mouse=0.0,Book=0.8,Cup=0.0;Mouse=0.0,Book=0.0,Cup=0.9;
#!# B <- Mouse=0.0,Book=0.8,Cup=0.0;Mouse=0.0,Book=0.0,Cup=0.9;Mouse=0.0,Book=0.0,Cup=0.7;
